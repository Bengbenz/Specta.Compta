# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  branches:
    include:
      - master
      - releases/*
      - feature/*
      - bugfix/*
      - refactoring/*
      - tec/*
      - test/*
    exclude:
      - docs/*
  paths:
    exclude:
      - docs/*
      - '**/*.md'
      - README.md
      - LICENCE

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.x'
  inputs:
    version: 3.x

# do this before your build tasks
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    #feedsToUse: config
    #nugetConfigPath: NuGet.config    # Relative to root of the repository
    #externalFeedCredentials: <Name of the NuGet service connection>

#- script: dotnet build --configuration $(BuildConfiguration)
#  displayName: 'Dotnet build $(BuildConfiguration)'
# ou
- task: DotNetCoreCLI@2
  displayName: 'Build - Conf: $(BuildConfiguration)'
  inputs:
    #command: build #by default DotNetCoreCLI command is build. Not need to mention it.
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Run all tests with (Tonerdo/Coverlet) "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
- task: DotNetCoreCLI@2
  displayName: 'Run Test'
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: 'tests/**/*.csproj'
    nobuild: true

# Palmedia.ReportGenerator task
- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator tool'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g dotnet-reportgenerator-globaltool'

- script: 'reportgenerator -reports:tests/**/coverage.cobertura.xml -targetdir:CodeCoverage -assemblyfilters:"-xunit*;-*Tests*" -reporttypes:"Cobertura;HtmlInline_AzurePipelines;Badges"' #TeamCitySummary, HtmlChart
  displayName: 'Codecoverage Report'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Codecoverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: 'CodeCoverage/Cobertura.xml'
    reportDirectory: 'CodeCoverage'

# Publish App output
- task: DotNetCoreCLI@2
  displayName: 'Publish App'
  inputs:
    command: publish
    publishWebProjects: True
    zipAfterPublish: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'finprod-artifacts'
