# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  branches:
    include:
      - master
      - releases/*
      - feature/*
      - bugfix/*
      - refactoring/*
      - tec/*
      - test/*
    exclude:
      - docs/*
  paths:
    exclude:
      - docs/*
      - '**/*.md'
      - README.md
      - LICENCE

pool:
  vmImage: 'ubuntu-latest'
  container: mcr.microsoft.com/playwright:v1.22.0-focal

variables:
  buildConfiguration: 'Release'
  reportCodeCoverageToolVersion: '5.1.6'
  codeCoverageParams: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
  netVersion: 'net6.0'
  unbuntuVersion: '22.04'

steps:
- script: |
    'sudo apt-get update'
    'sudo apt-get install -y wget apt-transport-https software-properties-common'
    'wget -q https://packages.microsoft.com/config/ubuntu/$(unbuntuVersion)/packages-microsoft-prod.deb'
    'sudo dpkg -i packages-microsoft-prod.deb'
    'sudo apt-get update'
    'sudo apt-get install -y powershell'
  displayName: 'Prepare Linux: Install apt dependencies'
  continueOnError: true
  
- script: 'sudo /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16'
  displayName: 'Start Xvfb'
  continueOnError: true
    
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: 6.x
    
# do this before your build tasks
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    #feedsToUse: config
    #nugetConfigPath: NuGet.config    # Relative to root of the repository
    #externalFeedCredentials: <Name of the NuGet service connection>

#- script: dotnet build --configuration $(BuildConfiguration)
#  displayName: 'Dotnet build $(BuildConfiguration)'
# ou
- task: DotNetCoreCLI@2
  displayName: 'Build - Conf: $(BuildConfiguration)'
  inputs:
    #command: build #by default DotNetCoreCLI command is build. Not need to mention it.
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-restore' 
    
# Install required browsers
- task: PowerShell@2
  displayName: 'Install playwright browsers'
  inputs:
    targetType: 'filePath'
    filePath: 'tests/Beng.Specta.Compta.IntegrationTests/bin/$(BuildConfiguration)/$(netVersion)/playwright.ps1'
    arguments: 'install'
  
# Run all tests with (Tonerdo/Coverlet) "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
- task: DotNetCoreCLI@2
  displayName: 'Run Unit tests'
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) $(CodeCoverageParams)'
    projects: tests/Beng.Specta.Compta.UnitTests/*.csproj
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'Run Integration tests'
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) $(CodeCoverageParams)'
    projects: tests/Beng.Specta.Compta.IntegrationTests/*.csproj
    nobuild: true
  
# Run functional tests
- script: 'dotnet test tests/Beng.Specta.Compta.FunctionalTests/ --no-build --logger trx --results-directory $(Agent.TempDirectory) --configuration $(BuildConfiguration) $(CodeCoverageParams)'
  displayName: 'Run Functionnal tests'
  continueOnError: true
  
# Publish functionalTests test report 
- task: PublishTestResults@2
  displayName: 'Publish tests report'
  inputs:
    testRunner: VSTest
    testResultsFiles: '$(Agent.TempDirectory)/*.trx'
    failTaskOnFailedTests: false
    
# Publish test attachments (screenshot and videos)  
- task: CopyFiles@2
  displayName: 'Publish tests attachments'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/?(*0.png|*1.png|*2.png|*3.png|*4.png|*5.png|*6.png|*7.png|*8.png|*9.png|*.webm)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  
# Palmedia.ReportGenerator install task
- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator tool'
  inputs:
    command: custom
    custom: tool
    arguments: 'install -g dotnet-reportgenerator-globaltool --version $(ReportCodeCoverageToolVersion)'
  
# Generate codecoverage report task
- script: 'reportgenerator -reports:tests/**/coverage.cobertura.xml -targetdir:CodeCoverage -assemblyfilters:"-xunit*;-*Tests*" -reporttypes:"Cobertura;HtmlInline_AzurePipelines;Badges"' #TeamCitySummary, HtmlChart
  displayName: 'Codecoverage Report'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Codecoverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: 'CodeCoverage/Cobertura.xml'
    reportDirectory: 'CodeCoverage'

# Publish App output
- task: DotNetCoreCLI@2
  displayName: 'Publish App'
  inputs:
    command: publish
    publishWebProjects: True
    zipAfterPublish: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'finprod-artifacts'
