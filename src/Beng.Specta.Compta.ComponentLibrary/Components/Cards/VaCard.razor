@if (IsVisible)
{
<div class="@ComputedClass" style="@ComputedCardStyle" @attributes="@AdditionalAttributes">
    @if (!string.IsNullOrWhiteSpace(Stripe))
    {
    <div class="va-card__stripe" style="@ComputedStripeStyle" />
    }
    @if (!string.IsNullOrWhiteSpace(Image))
    {
    <div class="va-card__image">
        <img src="@Image" alt="@ImageAlt">
        @if (IsOverlay)
        {
            <div class="va-card__image-overlay" />
        }
    </div>
    }
    @if (CanShowHeader)
    {
    <div class="@ComputedCardHeaderClass">
        <div class="va-card__header-inner">
            @if (Header is not null)
            {
                @Header
            }
            else
            {
            <div class="va-card__header-title" style="@ComputedHeaderTitleStyle">
                @Title
            </div>
            }
            <div class="va-card__header-actions">
                @Actions
            </div>
        </div>
    </div>
    }

    @if (BodyContent is not null)
    {
    <div class="@ComputedCardBodyClass">
        @BodyContent
    </div>
    }
</div>
}

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; } = null!;
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; } = null!;
    [Parameter] public string? Class { get; set; }
    [Parameter] public string Stripe { get; set; } = string.Empty;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Image { get; set; }
    [Parameter] public string? ImageAlt { get; set; }
    [Parameter] public string Color { get; set; } = string.Empty;
    [Parameter] public bool IsPaddingV { get; set; } = true;
    [Parameter] public bool IsPaddingH { get; set; } = true;
    [Parameter] public bool IsPadding { get; set; } = true;
    [Parameter] public bool IsOverlay { get; set; }
    [Parameter] public bool IsTitleOnImage { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? BodyContent { get; set; }
    [Parameter] public RenderFragment? Actions { get; set; }

    private bool CanShowHeader => !string.IsNullOrWhiteSpace(Title) || Actions is not null || Header is not null;

    private string ComputedColor => ContextTheme.ComputeColor(Color);

    private string ComputedClass =>
        CssBuilder.Default("va-card")
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .Build();

    private string ComputedCardBodyClass =>
        CssBuilder.Default("va-card__body")
            .AddClass("va-card__body--no-padding-v", !IsPaddingV)
            .AddClass("va-card__body--no-padding-h", !IsPaddingH)
            .AddClass("va-card__body--no-padding", !IsPadding)
            .AddClass("va-card__body--padding-top", (!CanShowHeader && IsPaddingV && IsPadding) || IsTitleOnImage)
            .Build();

    private string ComputedCardHeaderClass =>
        CssBuilder.Default("va-card__header")
            .AddClass("va-card__header--over", !string.IsNullOrWhiteSpace(Image) && IsTitleOnImage)
            .Build();

    private string ComputedHeaderTitleStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", "white", IsTitleOnImage)
            .AddStyle("color", ContextTheme[ThemeDictionary.InfoKey], !IsTitleOnImage)
            .Build();

    private string ComputedStripeStyle =>
        StyleBuilder.Empty()
            .AddStyle("background", () => ContextTheme.TryGetValue(Stripe, out var stripeColor) ? stripeColor : Stripe, true)
            .Build();

    private string ComputedCardStyle =>
        StyleBuilder.Default("box-shadow", BoxShadow())
            .AddStyle("color", "#fff", !string.IsNullOrWhiteSpace(Color))
            .AddStyle("background", ComputedColor.GetGradientBackground(), !string.IsNullOrWhiteSpace(Color) && ContextTheme.IsGradient)
            .AddStyle("background", ComputedColor, !string.IsNullOrWhiteSpace(Color) && ContextTheme.IsGradient)
            .Build();

    private string BoxShadow()
    {
        string shadow = string.Empty;
        if (ContextTheme.ShadowSize == SizeType.Small)
        {
            shadow = "0 1px 1px 0 rgba(190, 190, 190, 0.25)";
        }
        if (ContextTheme.ShadowSize == SizeType.Large)
        {
            shadow = "0 2px 3px 0 rgba(52, 56, 85, 0.25)";
        }
        return shadow;
    }
}
