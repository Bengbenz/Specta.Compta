@if (IsVisible)
{
<div class="@ComputedClass" style="@BadgeStyle" @attributes="AdditionalAttributes">
    <div class="va-badge__content d-flex">
        <div class="va-badge__content__title flex-center">
            @ChildContent
        </div>
    </div>
</div>
}

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public string Color { get; set; } = ThemeDictionary.SuccessKey;
    [Parameter] public string Class { get; set; }
    [Parameter] public bool IsOutline { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private string ComputedColor => (ContextTheme != null) ? ContextTheme.ComputeColor(Color) : ThemeDictionary.PrimaryKey;

    private string ComputedClass =>
        CssBuilder.Default("va-badge mr-2")
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .AddClass("va-badge--outline", IsOutline)
            .Build();
            
    private string BadgeStyle 
    {
      get
      {
          if(!ContextTheme.TryGetValue(Color, out var color))
          {
              color = !string.IsNullOrWhiteSpace(Color) ? Color : string.Empty;
          }
      
          var computedStyle = new StyleType
          {
              Color = IsOutline ? color : "#ffffff",
              BorderColor = color,
              BackgroundColor = !IsOutline ? color : string.Empty,
          };
          if(IsOutline)
          {
              computedStyle.Color = ComputedColor;
              computedStyle.BorderColor = ComputedColor;
          }
          else
          {
              computedStyle.BackgroundColor = ComputedColor;
          }

          return computedStyle.ToString();
      }
    }
}