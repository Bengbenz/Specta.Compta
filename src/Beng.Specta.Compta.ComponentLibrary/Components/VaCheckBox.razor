<div class="@ComputedClass">
    <div class="va-checkbox__input-container"
        @onclick="ToggleSelection"
        @onmousedown="@(() => HasMouseDown = true)"
        @onmouseup="@(() => HasMouseDown = false)" >
        <div class="@ActiveClass">
                <input id="@Id"
                    class="va-checkbox__input"
                    readonly
                    @onfocus="OnFocus"
                    @onblur="@(() => IsKeyboardFocused = false)"
                    @onkeypress:stopPropagation="true"
                    disabled="@IsDisabled"
                    indeterminate="@IsIndeterminated"
                    style="@InputStyle" />
                <VaIcon Name="@ComputedIcon"/>
        </div>
        <div class="va-checkbox__label-text" style="@LabelStyle" >
            @Label
        </div>
    </div>
    <VaMessageList class="va-checkbox__error-message-container"
                   Value="@ErrorMessages"
                   Color="@ThemeDictionary.DangerKey"
                   Limit="@ErrorCount" />
  </div>

  @code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Color { get; set; } = ThemeDictionary.PrimaryKey;
    [Parameter] public string CheckedIcon { get; set; } = "ion ion-md-checkmark";
    [Parameter] public string IndeterminateIcon { get; set; } = "ion ion-md-remove";
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsIndeterminated { get; set; }
    [Parameter] public bool IsError { get; set; }
    [Parameter] public int ErrorCount { get; set; }
    [Parameter] public IEnumerable<string> Messages { get; set; }
    [Parameter] public IEnumerable<string> ErrorMessages { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public bool Value { get; set; }

    private bool IsKeyboardFocused { get; set; }    
    private bool HasMouseDown { get; set; }
    private bool IsChecked => Value;
    private bool ShowError
    {
        get
        {
            // We make error active, if the error-message is not empty and checkbox is not disabled
            if (!IsDisabled)
            {
                return ErrorMessages.Any() || IsError;
            }
            return false;
        }
    }

    private string ComputedClass =>
        CssBuilder.Default("va-checkbox")
            .AddClass("va-checkbox--selected", IsChecked)
            .AddClass("va-checkbox--readonly", IsReadOnly)
            .AddClass("va-checkbox--disabled", IsDisabled)
            .AddClass("va-checkbox--indeterminate", IsIndeterminated)
            .AddClass("va-checkbox--error", ShowError)
            .AddClass("va-checkbox--on-keyboard-focus", IsKeyboardFocused)
            .AddClass(Class)
            .Build();

    private string ActiveClass =>
        CssBuilder.Default("va-checkbox__square")
            .AddClass("active", IsChecked)
            .Build();

    private string LabelStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", ContextTheme[ThemeDictionary.DangerKey], ShowError)
            .Build();

    private string ComputedIcon =>
        CssBuilder.Default("va-checkbox__icon-selected")
            .AddClass(IndeterminateIcon, IsIndeterminated)
            .AddClass(CheckedIcon, !IsIndeterminated)
            .Build();

    private string InputStyle =>
        StyleBuilder.Empty()
            .AddStyle("background", ContextTheme[ThemeDictionary.DangerKey], ShowError && IsChecked)
            .AddStyle("border-color", ContextTheme[ThemeDictionary.DangerKey], ShowError && !IsChecked)
            .AddStyle("background", ContextTheme[ThemeDictionary.PrimaryKey], !ShowError && IsChecked)
            .Build();

    private void ToggleSelection()
    {
        if (IsReadOnly || IsDisabled)
        {
            return;
        }

        Value = !Value;
    }

    private void OnFocus()
    {
    }
}