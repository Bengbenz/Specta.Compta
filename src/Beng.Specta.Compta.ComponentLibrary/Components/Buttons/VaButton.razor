<GenericLink class="@ComputedClass"
    style="@ComputedStyle" disabled="@IsDisabled"
    tabindex="0"
    Is="@Is"
    To="@To"
    Target="@Target"
    @onmouseover="EnableHoverState"
    @onmouseout="DisableHoverState"
    @onfocus="EnableFocusState"
    @onblur="DisableFocusState"
    @attributes="AdditionalAttributes">
    <div class="va-button__content">
    @if(!string.IsNullOrWhiteSpace(Icon))
    {
      <VaIcon FixedWidth="true"
              ExtraClass="va-button__content__icon va-button__content__icon-left"
              Name="@Icon" />
    }
    @if(HasTitle)
    {
      <div class="va-button__content__title">
          @ChildContent
      </div>
    }
    @if(!string.IsNullOrWhiteSpace(IconRight))
    {
      <VaIcon FixedWidth="true"
              ExtraClass="va-button__content__icon va-button__content__icon-right"
              Name="@IconRight"/>
    }
    </div>
</GenericLink>

@code{

  [Parameter(CaptureUnmatchedValues = true)]
  public IDictionary<string, object> AdditionalAttributes { get; set; }

  [CascadingParameter]
  public ThemeStore ContextTheme { get; set; }

  [Parameter]
  public string Is { get; set; } = "button";

  [Parameter]
  public string Target { get; set; }

  [Parameter]
  public string To { get; set; }

  [Parameter]
  public string ExtraClass { get; set; }

  [Parameter]
  public string ActiveClass { get; set; }

  [Parameter]
  public string Icon { get; set; }

  [Parameter]
  public string IconRight { get; set; }

  [Parameter]
  public string Type { get; set; }

  [Parameter]
  public string Color { get; set; } = ThemeStore.PrimaryKey;

  [Parameter]
  public string VaColorKey { get; set; }

  [Parameter]
  public StyleType ExtraStyle { get; set; }

  [Parameter]
  public bool IsDisabled { get; set; }

  [Parameter]
  public bool IsExact { get; set; }

  [Parameter]
  public bool IsReplace { get; set; }

  [Parameter]
  public bool IsFlat { get; set; }

  [Parameter]
  public bool IsOutline { get; set; }

  [Parameter]
  public bool IsSmall { get; set; }

  [Parameter]
  public bool IsLarge { get; set; }

  [Parameter]
  public RenderFragment ChildContent { get; set; }

  private bool IsHoverState { get; set; }
  private bool IsFocusState { get; set; }
  private string ComputedColor => ComputeColor();
  private string ComputedClass => ComputeClass();
  private string ComputedStyle => ComputeStyle();
  private bool HasTitle => ChildContent != null;

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
  }

  private void UpdateHoverState (bool isHover) => IsHoverState = isHover;
  private void EnableHoverState() => UpdateHoverState(true);
  private void DisableHoverState() => UpdateHoverState(false);
  private void UpdateFocusState (bool isHover) => IsFocusState = isHover;
  private void EnableFocusState() => UpdateFocusState(true);
  private void DisableFocusState() => UpdateFocusState(false);

  private string ComputeColor()
  {
    if(ContextTheme == null)
    {
      return ThemeStore.PrimaryKey;
    }
    return ContextTheme.ComputeColor(Color);
  }
  private string ComputeClass()
  {
    var computedClass = $"va-button {ExtraClass}";
    if(!IsFlat && !IsOutline)
    {
        computedClass += " va-button--default";
    }
    if(IsFlat)
    {
        computedClass += " va-button--flat";
    }
    if(IsOutline)
    {
        computedClass += " va-button--outline";
    }
    if(IsDisabled)
    {
        computedClass += " va-button--disabled";
    }
    if(IsHoverState)
    {
        computedClass += " va-button--hover";
    }
    if(IsFocusState)
    {
        computedClass += " va-button--focus";
    }
    if(!HasTitle)
    {
        computedClass += " va-button--without-title";
    }
    if(!string.IsNullOrWhiteSpace(Icon))
    {
        computedClass += " va-button--with-left-icon";
    }
    if(!string.IsNullOrWhiteSpace(IconRight))
    {
        computedClass += " va-button--with-right-icon";
    }
    if(IsLarge)
    {
        computedClass += " va-button--large";
    }
    if(IsSmall)
    {
        computedClass += " va-button--small";
    }
    if(!IsLarge && !IsSmall)
    {
        computedClass += " va-button--normal";
    }
    if(!string.IsNullOrWhiteSpace(ActiveClass))
    {
      computedClass += $" {ActiveClass}";
    }

    return computedClass.Trim();
  }

  private string GradientStyle()
  {
    if (IsFlat || IsOutline || !string.IsNullOrWhiteSpace(VaColorKey))
    {
      return string.Empty;
    }
    return ComputedColor.GetGradientBackground();
  }

  private string ShadowStyle()
  {
    if (IsFlat || IsOutline || !ContextTheme.IsShadow)
    {
      return string.Empty;
    }

    if (ContextTheme.Shadow == ShadowType.Small)
    {
      return "0 1px 1px 0 rgba(10, 13, 117, 0.25)";
    }

    if (ContextTheme.Shadow == ShadowType.Large)
    {
      if (!string.IsNullOrWhiteSpace(VaColorKey) && ContextTheme != null && ContextTheme.TryGetValue(VaColorKey, out var vaColor))
      {
        var color = (!string.IsNullOrWhiteSpace(Color)) ? ComputedColor.GetBoxShadowColor() : vaColor.GetBoxShadowColor();
        return $"0 0.125rem 0.19rem 0 {color}";
      }

      return $"0 0.125rem 0.19rem 0 {ComputedColor.GetBoxShadowColor()}";
    }
    return string.Empty;
  }

  private string ComputeStyle()
  {
    // ComputedStyle = "background-image: linear-gradient(to right, rgb(45, 30, 26), rgb(0, 0, 0)); color: rgb(255, 255, 255); box-shadow: rgba(0, 0, 0, 0.6) 0px 0.125rem 0.19rem 0px;";
     var computedStyle = new StyleType();
    if(ExtraStyle != null)
    {
      computedStyle = new StyleType(ExtraStyle);
    }

    if (IsFocusState)
    {
      if (IsOutline || IsFlat)
      {
        if (string.IsNullOrWhiteSpace(computedStyle.Color))
        {
          computedStyle.Color = ComputedColor;
        }
        computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
        computedStyle.Background = ComputedColor.GetFocusColor();
      }
      else
      {
        computedStyle.BackgroundImage = GradientStyle();
      }
    }
    else if (IsHoverState)
    {
      if (IsOutline || IsFlat)
      {
        if (string.IsNullOrWhiteSpace(computedStyle.Color))
        {
          computedStyle.Color = ComputedColor;
        }
        computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
        computedStyle.Background = ComputedColor.GetHoverColor();
      }
      else
      {
        computedStyle.BackgroundImage = GradientStyle();
      }
    }
    else
    {
      if (string.IsNullOrWhiteSpace(computedStyle.Color))
      {
        computedStyle.Color = IsFlat || IsOutline ? ComputedColor : "#ffffff";
      }
      computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
      computedStyle.BackgroundImage = GradientStyle();
      computedStyle.BoxShadow = ShadowStyle();
    }

    if (!IsOutline && !IsFlat && (!string.IsNullOrWhiteSpace(VaColorKey) || !ContextTheme.IsGradient))
    {
      computedStyle.Background = !string.IsNullOrWhiteSpace(Color) ? ComputedColor : ContextTheme.TryGetValue(VaColorKey, out var vaColor) ? vaColor : Color;
      computedStyle.BackgroundImage = string.Empty;
    }

    return computedStyle.ToString();
  }
}