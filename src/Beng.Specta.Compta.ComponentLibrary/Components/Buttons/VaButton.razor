@using Beng.Specta.Compta.ComponentLibrary.Components.Icons

@if(IsVisible)
{
<GenericLink class="@ComputedClass"
    style="@ComputedStyle" disabled="@IsDisabled"
    tabindex="0"
    Type="@Type"
    To="@To"
    Target="@Target"
    @onmouseover="EnableHoverState"
    @onmouseout="DisableHoverState"
    @onfocus="EnableFocusState"
    @onblur="DisableFocusState"
    @attributes="AdditionalAttributes">
    <div class="va-button__content">
        <VaIcon IsVisible="@(!string.IsNullOrWhiteSpace(Icon))"
                IsFixedWidth="true"
                class="va-button__content__icon va-button__content__icon-left"
                Name="@Icon"
                IsLarge="@IsLarge"
                IsSmall="@IsSmall"
                Size="@IconSize" />
    @if(HasTitle)
    {
      <div class="va-button__content__title">
          @ChildContent
      </div>
    }
    <VaIcon IsVisible="@(!string.IsNullOrWhiteSpace(IconRight))"
            IsFixedWidth="true"
            class="va-button__content__icon va-button__content__icon-right"
            Name="@IconRight"
            IsLarge="@IsLarge"
            IsSmall="@IsSmall"
            Size="@IconSize"/>
    </div>
</GenericLink>
}

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Button;
    [Parameter] public string Target { get; set; }
    [Parameter] public string To { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string ActiveClass { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public string IconRight { get; set; }
    [Parameter] public string IconSize { get; set; }
    [Parameter] public string Color { get; set; } = ThemeDictionary.PrimaryKey;
    [Parameter] public string ColorKey { get; set; }
    [Parameter] public StyleType ExtraStyle { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsVisible { get; set; } = true;
    [Parameter] public bool IsExact { get; set; }
    [Parameter] public bool IsReplace { get; set; }
    [Parameter] public bool IsFlat { get; set; }
    [Parameter] public bool IsOutline { get; set; }
    [Parameter] public bool IsSmall { get; set; }
    [Parameter] public bool IsLarge { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool IsHoverState { get; set; }
    private bool IsFocusState { get; set; }
    private string ComputedColor => ContextTheme.ComputeColor(Color);
    private bool HasTitle => ChildContent != null;

    private string ComputedClass =>
        CssBuilder.Default("va-button")
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .AddClass("va-button--default", !IsFlat && !IsOutline)
            .AddClass("va-button--flat", IsFlat)
            .AddClass("va-button--outline", IsOutline)
            .AddClass("va-button--disabled", IsDisabled)
            .AddClass("va-button--hover", IsHoverState)
            .AddClass("va-button--focus", IsFocusState)
            .AddClass("va-button--without-title", !HasTitle)
            .AddClass("va-button--with-left-icon", !string.IsNullOrWhiteSpace(Icon))
            .AddClass("va-button--with-right-icon", !string.IsNullOrWhiteSpace(IconRight))
            .AddClass("va-button--large", IsLarge)
            .AddClass("va-button--small", IsSmall)
            .AddClass("va-button--normal", !IsLarge && !IsSmall)
            .AddClass(ActiveClass, !string.IsNullOrWhiteSpace(ActiveClass))
            .Build();

    private string ComputedStyle
    {
        get
        {
            var computedStyle = new StyleType();
            if (ExtraStyle != null)
            {
                computedStyle = new StyleType(ExtraStyle);
            }

            if (IsFocusState)
            {
                if (IsOutline || IsFlat)
                {
                    if (string.IsNullOrWhiteSpace(computedStyle.Color))
                    {
                      computedStyle.Color = ComputedColor;
                    }
                    computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
                    computedStyle.Background = ComputedColor.GetFocusColor();
                }
                else
                {
                    computedStyle.BackgroundImage = GradientStyle();
                }
            }
            else if (IsHoverState)
            {
              if (IsOutline || IsFlat)
              {
                  if (string.IsNullOrWhiteSpace(computedStyle.Color))
                  {
                    computedStyle.Color = ComputedColor;
                  }
                  computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
                  computedStyle.Background = ComputedColor.GetHoverColor();
              }
              else
              {
                  computedStyle.BackgroundImage = GradientStyle();
              }
            }
            else
            {
                if (string.IsNullOrWhiteSpace(computedStyle.Color))
                {
                    computedStyle.Color = IsFlat || IsOutline ? ComputedColor : "#ffffff";
                }
                computedStyle.BorderColor = IsOutline ? ComputedColor : string.Empty;
                computedStyle.BackgroundImage = GradientStyle();
                computedStyle.BoxShadow = ShadowStyle();
            }

            if (!IsOutline && !IsFlat && (!string.IsNullOrWhiteSpace(ColorKey) || !ContextTheme.IsGradient))
            {
                computedStyle.Background = !string.IsNullOrWhiteSpace(Color) ? ComputedColor : ContextTheme.TryGetValue(ColorKey, out var vaColor) ? vaColor : Color;
                computedStyle.BackgroundImage = string.Empty;
            }

            return computedStyle.ToString();
        }
    }

    private void UpdateHoverState (bool isHover) => IsHoverState = isHover;

    private void EnableHoverState() => UpdateHoverState(true);

    private void DisableHoverState() => UpdateHoverState(false);

    private void UpdateFocusState (bool isHover) => IsFocusState = isHover;

    private void EnableFocusState() => UpdateFocusState(true);

    private void DisableFocusState() => UpdateFocusState(false);

    private string GradientStyle()
    {
        if (IsFlat || IsOutline || !string.IsNullOrWhiteSpace(ColorKey))
        {
            return string.Empty;
        }
        return ComputedColor.GetGradientBackground();
    }

    private string ShadowStyle()
    {
        if (IsFlat || IsOutline || !ContextTheme.IsShadow)
        {
            return string.Empty;
        }

        if (ContextTheme.ShadowSize == SizeType.Small)
        {
            return "0 1px 1px 0 rgba(10, 13, 117, 0.25)";
        }

        if (ContextTheme.ShadowSize == SizeType.Large)
        {
            if (!string.IsNullOrWhiteSpace(ColorKey) && ContextTheme != null && ContextTheme.TryGetValue(ColorKey, out var vaColor))
            {
                var color = (!string.IsNullOrWhiteSpace(Color)) ? ComputedColor.GetBoxShadowColor() : vaColor.GetBoxShadowColor();
                return $"0 0.125rem 0.19rem 0 {color}";
            }

            return $"0 0.125rem 0.19rem 0 {ComputedColor.GetBoxShadowColor()}";
        }
        return string.Empty;
    }
}