<div class="va-button-toggle @ExtraClass" @attributes="AdditionalAttributes">
    <VaButtonGroup>
    @foreach(var option in Options)
    {
        <VaButton
                Color="@ButtonColor(option.Value)"
                ExtraStyle="@ButtonStyle(option.Value)"
                ActiveClass="@ButtonClass(option.Value)"
                IsOutline="@IsOutline"
                IsFlat="@IsFlat"
                IsDisabled="@IsDisabled"
                IsSmall="@IsSmall"
                IsLarge="@IsLarge"
                @onclick="@(() => ToggleValue(option))">
            @option.Label
        </VaButton>
    }
    </VaButtonGroup>
</div>

@code
{
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [CascadingParameter]
    public ThemeStore ContextTheme { get; set; }

    [Parameter]
    public string ExtraClass { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Color { get; set; } = ThemeStore.PrimaryKey;

    [Parameter]
    public string ToggleColor { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool IsFlat { get; set; }

    [Parameter]
    public bool IsOutline { get; set; }

    [Parameter]
    public bool IsSmall { get; set; }

    [Parameter]
    public bool IsLarge { get; set; }

    [Parameter]
    public IReadOnlyList<OptionType> Options { get; set; }

    [Parameter]
    public EventCallback OnToggleValue { get; set; }

    private string ButtonColor(string buttonValue)
    {
      return buttonValue == Value && !string.IsNullOrWhiteSpace(ToggleColor) ? ToggleColor : Color;
    }

    private StyleType ButtonStyle(string buttonValue)
    {
        var buttonStyle = new StyleType();
        if (buttonValue != Value)
        {
            return buttonStyle;
        }

        if (IsOutline || IsFlat)
        {
            buttonStyle.BackgroundColor = ContextTheme[(!string.IsNullOrWhiteSpace(ToggleColor)) ? ToggleColor : Color];
            buttonStyle.Color = "#ffffff";
        }
        else
        {
            buttonStyle.BackgroundColor = ContextTheme[Color].GetGradientBackground();
            buttonStyle.Filter = "brightness(85%)";
        }
        return buttonStyle;
    }

    private string ButtonClass(string buttonValue) => (buttonValue == Value) ? "va-button--active" : string.Empty;

    private void ToggleValue(OptionType option)
    {
        Value = option.Value;
        option.OnSelectedItemHandler.Invoke();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }
}