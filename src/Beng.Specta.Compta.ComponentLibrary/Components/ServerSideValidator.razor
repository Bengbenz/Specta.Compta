@using System.Globalization
@inject ILogger<ServerSideValidator> Logger

@code {

    private ValidationMessageStore? _messageStore;

    [CascadingParameter] private EditContext? EditContext { get; set; }

    protected override void OnInitialized()
    {
        if (EditContext == null)
        {
            throw new InvalidOperationException($"{GetType().Name} requires a cascading " +
                $"parameter of type {nameof(EditContext)}. For example, you can use {GetType().Name} " +
                $"inside an {nameof(EditForm)}.");
        }

        _messageStore = new ValidationMessageStore(EditContext);
        EditContext.OnValidationRequested += (s, e) => _messageStore.Clear();
        EditContext.OnFieldChanged += (s, e) => _messageStore.Clear(e.FieldIdentifier);
    }

    public void DisplayErrors(IDictionary<string, List<string>>? errors, bool shouldLog = false)
    {
        ArgumentNullException.ThrowIfNull(errors);
        
        foreach (var err in errors)
        {
            _messageStore!.Add(EditContext!.Field(ToTitleCase(err.Key)), err.Value);
        }

        if (shouldLog)
        {
            Logger.LogDebug($"{GetType().Name} - DisplayErrors: {string.Join(" | ", errors.Select(x  => ToTitleCase(x.Key) + ": " + string.Join(",", x.Value)))}");
        }
        EditContext!.NotifyValidationStateChanged();
    }
    
    public void DisplayError(string errorKey, string errorDescription, bool shouldLog = false)
    {
        if (string.IsNullOrWhiteSpace(errorKey))
        {
            throw new ArgumentNullException(nameof(errorKey));
        }
        if (string.IsNullOrWhiteSpace(errorDescription))
        {
            throw new ArgumentNullException(nameof(errorDescription));
        }
        var errors = new Dictionary<string, List<string>>
        {
            { errorKey, new List<string>{ errorDescription } }
        };
        DisplayErrors(errors, shouldLog);
    }

    private string ToTitleCase(string key) => CultureInfo.InvariantCulture.TextInfo.ToTitleCase(key);
}