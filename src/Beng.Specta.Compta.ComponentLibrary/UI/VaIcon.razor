<i class="@IconClass" style="@IconStyle" @attributes="AdditionalAttributes">
     @ChildContent
</i>

@code{

  [Parameter(CaptureUnmatchedValues = true)]
  public IDictionary<string, object> AdditionalAttributes { get; set; }

  [CascadingParameter]
  public ThemeStore ContextTheme { get; set; }

  [Parameter]
  public string ExtraClass { get; set; }

  [Parameter]
  public string Name { get; set; }

  [Parameter]
  public bool Small { get; set; }

  [Parameter]
  public bool Large { get; set; }

  [Parameter]
  public bool FixedWidth { get; set; }

  [Parameter]
  public int Rotation { get; set; }

  [Parameter]
  public string Size { get; set; }

  [Parameter]
  public string Color { get; set; }

  [Parameter]
  public string ExtraStyle { get; set; }

  [Parameter]
  public RenderFragment ChildContent { get; set; }

  private string IconStyle => ComputeIconStyle();

  private string IconClass => ComputeIconClass();

  private string ComputeIconClass()
  { 
    var iconClass = $"va-icon";
    if(!string.IsNullOrWhiteSpace(ExtraClass))
    {
      iconClass += $" {ExtraClass}";
    }
    if(!string.IsNullOrWhiteSpace(Name))
    {
      iconClass += $" {Name}";
    }
    if(Large)
    {
      iconClass += " va-icon--large ";
    }
    if(Small)
    {
      iconClass += " va-button--small ";
    }
    if(FixedWidth)
    {
      iconClass += " va-button--fixed ";
    }

    return iconClass;
  }

  private string ComputeIconStyle()
  {
    var iconStyle = new StyleType();
    if(Rotation != 0)
    {
      iconStyle.Rotation = Rotation;
    }
    if(!string.IsNullOrWhiteSpace(Size))
    {
      iconStyle.FontSize = Size;
    }
    if(ContextTheme != null && Color != null && ContextTheme.TryGetValue(Color, out var color))
    {
      iconStyle.Color = color;
    }
    if(!string.IsNullOrWhiteSpace(Color))
    {
      iconStyle.Color = Color;
    }

    return iconStyle.ToString();
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
  }
}
