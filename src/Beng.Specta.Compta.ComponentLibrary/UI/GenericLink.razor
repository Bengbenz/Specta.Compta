@if (Link == LinkType.A)
{
    <a href="@To" target="@Target" @attributes="AdditionalAttributes">
        @ChildContent
    </a>
}
else if (Link == LinkType.NavLink)
{
    <NavLink href="@To" target="@Target" @attributes="AdditionalAttributes">
        @ChildContent
    </NavLink>
}
else
{
    <button @attributes="AdditionalAttributes">
        @ChildContent
    </button>
}

@code{

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public string Is { get; set; }

    [Parameter]
    public string Target { get; set; }

    [Parameter]
    public string To { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private LinkType Link { get; set; } = LinkType.Button;

    protected override async Task OnParametersSetAsync()
    {
        Link = GetLinkType(Is);
        await base.OnParametersSetAsync();
    }

    private LinkType GetLinkType(string type)
    {   
        var link = LinkType.Button;
        if(type.Equals("a"))
        {
            link = LinkType.A;
        }
        else if(type.Equals("navlink"))
        {
            link = LinkType.NavLink;
        }
        
        return link;
    }

    private enum LinkType
    {
        A,
        Button,
        NavLink
    }
}
