@inject ThemeState ThemeState

@typeparam TItem

<VaCard class="@ComputedClass"
        Title="@Title"
        Image="@ImageForEmpty"
        IsOverlay="true"
        IsTitleOnImage="@(!string.IsNullOrWhiteSpace(ImageForEmpty))">
    <Header>
        @if (Items?.Count == 0)
        {
            <VaButton Icon="ion ion-ios-add-circle-outline" @onclick="@AddAction" IsLarge="true">
                @NewText
            </VaButton>
        }
        else
        {
            <VaIcon Name="@Icon" Color="@ThemeDictionary.InfoKey" />
            <h5 class="ml-2 mt-0 mb-0" style="color:@(ContextTheme[ThemeDictionary.InfoKey])">@Title</h5>
        }
    </Header>
    <Actions>
        <VaButton IsVisible="@(Items?.Count > 0)" Icon="fa fa-refresh" @onclick="@Loader" />
    </Actions>
    <BodyContent>
        <VaNotification BadgeText="Error"
            Color="@ThemeDictionary.DangerKey"
            IsVisible="@(string.IsNullOrEmpty(ErrorDetails))"
            class="mb-4">
            @ErrorDetails
        </VaNotification>
    @if (Items is null)
    {
        @Loading
    }
    else if (Items.Count > 0)
    {
        foreach(var item in Items)
        {
            @Item(item)
        }
    }
    else
    {
        <div class="flex-center py-2">
            @Empty
        </div>
    }
   </BodyContent>
</VaCard>

@code {

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; } = null!;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Class { get; set; }    
    [Parameter] public string? NewText { get; set; }
    [Parameter] public string ErrorDetails  { get; set; } = string.Empty;
    [Parameter] public RenderFragment? Loading { get; set; }
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter] public RenderFragment<TItem> Item { get; set; } = null!;
    [Parameter] public Func<Task<IList<TItem>>> Loader { get; set; } = null!;
    [Parameter] public EventCallback AddAction { get; set; }

    private IList<TItem>? Items { get; set; }

    private string ImageForEmpty => Items?.Count == 0 ? ThemeState.GetRandomBackgroundImage() : string.Empty;

    private string ComputedClass =>
        CssBuilder.Empty()
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .AddClass("mb-2", string.IsNullOrWhiteSpace(Class))
            .Build();

    protected override async Task OnParametersSetAsync()
    {
        Items = await Loader();
    }
}