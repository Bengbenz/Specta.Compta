@inject ThemeState ThemeState

@typeparam TItem

<VaCard class="@ComputedClass"
        Title="@Title"
        Image="@ImageForEmpty"
        IsTitleOnImage="@(!string.IsNullOrWhiteSpace(ImageForEmpty))"
        ShowBody="@(Items is null || !Items.Any() || ViewType == ViewType.AsList)">
    <Header>
        @if (Items is not null && !Items.Any())
        {
            <VaButton Icon="ion ion-ios-add-circle-outline" @onclick="@ShowAddFormAction" IsLarge="true">
                @NewText
            </VaButton>
        }
        else
        {
            <VaIcon Name="@Icon" Color="@ThemeDictionary.InfoKey" />
            <h5 class="ml-2 mt-0 mb-0" style="color:@(ContextTheme[ThemeDictionary.InfoKey])">@Title</h5>
        }
    </Header>
    <Actions>
        <VaButton IsVisible="@(Items is not null && Items.Any())" Icon="ion ion-ios-add-circle-outline" @onclick="@ShowAddFormAction" />
    </Actions>
    <BodyContent>
        <VaNotification BadgeText="Error"
                        Color="@ThemeDictionary.DangerKey"
                        IsVisible="@(!string.IsNullOrWhiteSpace(ErrorDetails))"
                        class="mb-4">
            @ErrorDetails
        </VaNotification>
        @if (Items is null)
        {
            @Loading
        }
        else if (!Items.Any())
        {
            <div class="flex-center py-2">
                @Empty
            </div>
        }
        else // As List
        {
            foreach(var item in Items)
            {
                @ItemTemplate(item)
            }
        }
    </BodyContent>
</VaCard>
    
@if (ViewType == ViewType.AsCard && Items is not null && Items.Any())
{
    <div class="cards-container row d-flex wrap align--start">
        @foreach (var item in Items)
        {
            @ItemTemplate(item)
        }
    </div>
}

@code {

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; } = null!;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Class { get; set; }    
    [Parameter] public string? NewText { get; set; }
    [Parameter] public string? ErrorDetails  { get; set; }
    [Parameter] public ViewType ViewType  { get; set; } = ViewType.AsList;
    [Parameter] public RenderFragment? Loading { get; set; }
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; } = null!;
    [Parameter] public Func<Task<IEnumerable<TItem>>> Loader { get; set; } = null!;
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public EventCallback ShowAddFormAction { get; set; }

    private string ImageForEmpty => Items is not null && !Items.Any() ? ThemeState.GetRandomBackgroundImage() : string.Empty;

    private string ComputedClass =>
        CssBuilder.Empty()
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .AddClass("mb-2", string.IsNullOrWhiteSpace(Class))
            .Build();

    protected override async Task OnParametersSetAsync()
    {
        Items = await Loader();
    }
}