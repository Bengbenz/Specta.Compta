@inject ThemeState ThemeState

@typeparam TItem

<VaCard class="@ComputedClass"
        Title="@Title"
        Image="@ImageForEmpty"
        IsOverlay="true"
        IsTitleOnImage="@(!string.IsNullOrWhiteSpace(ImageForEmpty))">
    <Header>
        @if (Items?.Count == 0)
        {
            <VaButton Icon="ion ion-ios-add-circle-outline" @onclick="AddAction" IsLarge="true">
                @NewText
            </VaButton>
        }
        else
        {
            <VaIcon Name="@Icon" Color="@ThemeDictionary.InfoKey" />
            <h5 class="ml-2 mt-0 mb-0" style="color:@(ContextTheme[ThemeDictionary.InfoKey])">@Title</h5>
        }
    </Header>
    <Actions>
        <VaButton IsVisible="@(Items?.Count > 0)" Icon="fa fa-refresh" @onclick="@Loader" />
    </Actions>
    <BodyContent>
        <VaNotification BadgeText="Error"
            Color="@ThemeDictionary.DangerKey"
            IsVisible="@(!string.IsNullOrEmpty(ErrorDetails))"
            class="mb-4">
            @ErrorDetails
        </VaNotification>
    @if (Items is null)
    {
        @Loading
    }
    else if (Items.Count <= 0)
    {
        <div class="flex-center py-2">
            @Empty
        </div>
    }
        <SfGrid @ref="Grid"
            TValue="TItem"
            IsVisible="@(Items?.Count > 0)"
            Toolbar="@Tools"
            ContextMenuItems="@ContextMenuItems"
            AllowGrouping="@(GroupedColumns.Any())"
            AllowSorting="true"
            AllowResizing="true"
            ShowColumnChooser="true"
            AllowExcelExport="true" >
            <SfDataManager AdaptorInstance="@Adaptor" Adaptor="Adaptors.CustomAdaptor" />
            <GridPageSettings PageSize="10" />
            <!--<GridEvents TValue="@(Item.GetType().Name)" OnActionFailure="@ActionFailure" />-->
            <GridGroupSettings Columns="@GroupedColumns" />
            <GridEditSettings AllowAdding="true"
                AllowEditing="true"
                AllowDeleting="true"
                Mode="EditMode.Dialog"
                ShowDeleteConfirmDialog="true" />
            @ColomnSettings
        </SfGrid>
   </BodyContent>
</VaCard>

@code {

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; } = null!;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Class { get; set; }    
    [Parameter] public string? NewText { get; set; }
    [Parameter] public string? ErrorDetails  { get; set; }
    [Parameter] public RenderFragment? Loading { get; set; }
    [Parameter] public RenderFragment? Empty { get; set; }
    [Parameter] public RenderFragment<TItem>? ColomnSettings { get; set; }
    //[Parameter] public RenderFragment<TItem> Item { get; set; }
    [Parameter] public Func<Task<IList<TItem>>> Loader { get; set; } = null!;
    // [Parameter] public EventCallback AddAction { get; set; }
    [Parameter] public string[] GroupedColumns { get; set; } = new string[]{};
    [Parameter] public Type? Adaptor { get; set; }
    [Parameter] public string? ItemType { get; set; }

    private IList<TItem>? Items { get; set; }

    private SfGrid<TItem> Grid { get; set; } = null!;

    private string ImageForEmpty => (Items?.Count == 0) ? ThemeState.GetRandomBackgroundImage() : string.Empty;
    private string[] Tools = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "ColumnChooser", "Search" }; //"Add", "Edit", "Delete", "Update", "Delete", "ExcelExport", "ColumnChooser", "Search"
    private string[] ContextMenuItems = new string[] { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Copy", "Edit", "Delete", "Save", "Cancel" }; //"AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"

    private string ComputedClass =>
        CssBuilder.Empty()
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .AddClass("mb-2", string.IsNullOrWhiteSpace(Class))
            .Build();

    private void ActionFailure(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        ErrorDetails = $"Exception: {args}";
        StateHasChanged();
    }

    private async Task AddAction()
    {
        var addData = default(TItem);
        Items!.Add(addData!);
        //StateHasChanged();
        await Grid.AddRecord(addData!);
    }

    protected override async Task OnInitializedAsync()
    {
        Items = await Loader();
        await base.OnInitializedAsync();
    }
}