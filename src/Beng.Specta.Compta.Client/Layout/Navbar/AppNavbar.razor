
@inject HttpClient HttpClient
@inject TenantService TenantService
@inject LayoutState LayoutState
@inject ILogger<AppNavbar> Logger

<nav class="app-navbar app-layout__navbar" style="@NavbarStyle">
    <div class="app-navbar__content row">
        <div class="app-navbar__menu-container">
            <VaIconMenu class="app-navbar__menu" IsVisible="@(!LayoutState.IsMinimized)"
                OnClick="@ToggleMinimized"
                Color="@ComputedColor" />

            <VaIconMenuCollapsed class="app-navbar__menu" IsVisible="@LayoutState.IsMinimized"
                OnClick="@ToggleMinimized"
                Color="@ComputedColor"/>

            <a class="app-navbar__logo mr-3" href="/">
                <VaIconApp />
            </a>
        </div>
        <div class="app-navbar__center lg5 md4">
        @if(TenantInfo != null)
        { 
            <VaButton  class="app-navbar__button"
                      Icon="fa fa-github"
                      Color="#000000"
                      To="/"
                      Target="_blank"
                      Is="a">
                <text>@TenantInfo.Name</text>
            </VaButton>
        }
        </div>
            <AppNavbarActions class="app-navbar__actions md5 lg4" />
        </div>
    <div class="app-navbar__shape" style="@ShapeStyle" ></div>
</nav>

@code{

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }

    private TenantInfoDTO TenantInfo { get; set; }

    private string ComputedColor => (ContextTheme.IsInverted) ? ContextTheme[ThemeDictionary.GrayKey] : "white";

    private string NavbarStyle =>
        StyleBuilder.Empty()
            .AddStyle("background-color", "white", !ContextTheme.IsGradient)
            .AddStyle("background-color", ContextTheme[ThemeDictionary.SecondaryKey]
                .ColorShiftHsl(new HslType { Hue = 0, Saturation = -13, Lightness = 15 }).ToString(), ContextTheme.IsGradient)
            .AddStyle("box-shadow", "0 2px 3px 0 rgba(52, 56, 85, 0.25)", ContextTheme.ShadowSize == SizeType.Small)
            .Build();

    private string ShapeStyle =>
        StyleBuilder.Empty()
            .AddStyle("border-top-color", "transparent", !ContextTheme.IsGradient)
            .AddStyle("border-top-color", ContextTheme[ThemeDictionary.SecondaryKey]
                .ColorShiftHsl(new HslType { Hue = -1, Saturation = -11, Lightness = 10 }).ToString(), ContextTheme.IsGradient)
            .Build();

    private void ToggleMinimized() => LayoutState.ToggleMinimized();

    protected override async Task OnInitializedAsync()
    {
        await GetTenantInfoAsync();
        await base.OnInitializedAsync();
    }

    protected async Task GetTenantInfoAsync()
    {
        string tenantId = TenantService.GetTenantIdentifier();
        string apiRequest = "/tenant"; //$"/{tenantId}/tenantname";
        try
        {
            TenantInfo = await HttpClient.GetJsonAsync<TenantInfoDTO>(apiRequest);
            
            Logger.LogDebug($"{GetType().Name} initializing... Requested={apiRequest}, Response={TenantInfo?.Name}");
        }
        catch(Exception ex)
        {
            Logger.LogError($"{GetType().Name} Can't get Tenant Info from Requested={apiRequest}./n {ex}");
        }
    }
}