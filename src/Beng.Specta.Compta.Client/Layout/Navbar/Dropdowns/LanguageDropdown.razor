<VaDropdown class="@ComputedClass" offset="0, 16" IsFixed="true" >
    <Anchor>
        <VaIcon Name="@AnchorIconClass"/> 
    </Anchor>
    <Content>
        <div class="language-dropdown__content pl-4 pr-4 pt-2 pb-2">
        @foreach(var option in Options)
        {
            <div @key="option.Value" class="@OptionClass(option.Value)" style="@OptionStyle(option.Value)"
                @onclick="@(() => SetLanguage(option.Value))"
                @onmouseover="@(() => HoverHandler(option.Value))"
                @onmouseout="@(() => HoverHandler())" >
                <VaIcon Name="@ContentIconClass(option.Value)"/>
                <span class="dropdown-item__text">
                    @option.Label
                </span>
            </div>
        }
        </div>
    </Content>
</VaDropdown>


@code{
   
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public string Class { get; set; }
    
    private string CurrentLanguage { get; set; } = "fr";
    private string HoveredItem { get; set; }

    private string FlagIconClass(string code) => $"flag-icon-{code}";

    private string ComputedClass =>
        CssBuilder.Default("language-dropdown")
                .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
                .Build();

    private string AnchorIconClass =>
        CssBuilder.Default("flag-icon flag-icon-large")
            .AddClass(FlagIconClass(CurrentLanguage))
            .Build();

    private string ContentIconClass(string code) =>
        CssBuilder.Default("flag-icon flag-icon-small")
            .AddClass(FlagIconClass(code))
            .Build();

    private string OptionClass(string code) =>
        CssBuilder.Default("language-dropdown__item row align--center pt-1 pb-1 mt-2 mb-2")
            .AddClass("active", code == CurrentLanguage)
            .Build();

    private string OptionStyle(string code) =>
        StyleBuilder.Empty()
            .AddStyle("color", $"{ContextTheme[ThemeDictionary.PrimaryKey]} !important", code == CurrentLanguage || code == HoveredItem)
            .Build();

    private void SetLanguage (string code) => CurrentLanguage = code; // Vue.i18n.set(locale)
    
    private void HoverHandler(string code = null) => HoveredItem = code;

    private IReadOnlyList<OptionType> Options { get; } = new List<OptionType>
    {
        new OptionType { Label = "English", Value = "gb" },
        new OptionType { Label = "Spanish", Value = "es" },
        new OptionType { Label = "Brazilian", Value = "br" },
        new OptionType { Label = "Chinese", Value = "cn" },
        new OptionType { Label = "French", Value = "fr" },
    };
}