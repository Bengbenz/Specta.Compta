@using Beng.Specta.Compta.Core.Services.Auth

<VaDropdown class="@ComputedClass"
    IsBoundaryBody="true" offset="0, 16"
    OnExpand="@OnExpand"
    @attributes="@AdditionalAttributes">
    <Anchor>
        <span class="profile-dropdown__anchor" style="@ComputedAnchorStyle">
            <span>@Label</span>
            <VaIcon Name="@AnchorIconClass" class="pa-1" />
        </span>
    </Anchor>
    <Content>
        <div class="profile-dropdown__content pl-4 pr-4 pt-2 pb-2">
        @foreach(var option in Options)
        {
            <NavLink id="@option.Label" style="@OptionStyle(option.Value)"
                class="profile-dropdown__item row align--center pt-1 pb-1 mt-2 mb-2"
                href="@option.Value" 
                @onmouseover="@(() => HoverHandler(option.Value))"
                @onmouseout="@(() => HoverHandler())" >
                @option.Label
            </NavLink>
        }
        </div>
    </Content>
</VaDropdown>

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string Class { get; set; }
    
    private string Label { get; set; }
    private bool IsExpanded { get; set; } = false;
    private string AnchorIconClass => IsExpanded ? "fa fa-angle-up" : "fa fa-angle-down";
    private string HoveredItem { get; set; }

    private string ComputedClass =>
        CssBuilder.Default("profile-dropdown")
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .Build();

    private string ComputedAnchorStyle =>
        StyleBuilder.Default("color", ContextTheme[ThemeDictionary.PrimaryKey])
            .Build();

    private string OptionStyle(string code) =>
        StyleBuilder.Empty()
            .AddStyle("color", $"{ContextTheme[ThemeDictionary.PrimaryKey]} !important", code == HoveredItem)
            .Build();

    private void HoverHandler(string code = null) => HoveredItem = code;

    private IReadOnlyCollection<OptionType> Options { get; } = new List<OptionType>
    {
        new OptionType { Label = "Mon Compte", Value = "/profile" },
        new OptionType { Label = "Se d√©connecter", Value = "/logout" },
    };

    private void OnExpand()
    {
        IsExpanded = !IsExpanded;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationStateTask).User;
        Label = !string.IsNullOrWhiteSpace(user.Name()) ? user.Name() : user.Email();
        
        await base.OnInitializedAsync();
    }
}
