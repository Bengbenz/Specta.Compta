<VaDropdown class="@ComputedClass" offset="0, 16" @attributes="@AdditionalAttributes">
    <Anchor>
        <VaIcon Name="vuestic-iconset vuestic-iconset-settings"
                class="settings-dropdown__icon"
                Size="1.4rem;"
                style="display: flex;"
                Color="@IconColor" />
    </Anchor>
    <Content>
        <div class="settings-dropdown__content pl-4 pr-4 pt-2 pb-2">
            <div class="settings-dropdown__content-label mt-2 mb-3"
                 style="@ContentStyle">
              Settings
            </div>
            <VaButtonToggle IsOutline="true" IsSmall="true"
                Options="@ModelOptions"
                class="settings-dropdown__control mb-2"
                Value="@ContextTheme.Name" />
        </div>
    </Content>
</VaDropdown>

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public string Class { get; set; }

    private string HoveredItem { get; set; }

    private IReadOnlyList<OptionType> ModelOptions => new List<OptionType>
    {
        new OptionType { Label = ThemeDictionary.Default.Name, Value = ThemeDictionary.Default.Name, OnSelectedItemHandler = ThemeDictionary.OnToggle  },
        new OptionType { Label = ThemeDictionary.Corporate.Name, Value = ThemeDictionary.Corporate.Name, OnSelectedItemHandler = ThemeDictionary.OnToggle },
    };

    private string IconColor => (ContextTheme.IsInverted) ? ContextTheme[ThemeDictionary.GrayKey] : "white";

    private string ComputedClass =>
        CssBuilder.Default("settings-dropdown")
            .AddClass(Class, !string.IsNullOrWhiteSpace(Class))
            .Build();

    private string ContentStyle => 
        StyleBuilder.Default("color", ContextTheme[ThemeDictionary.PrimaryKey])
            .Build();
}
