@inherits LayoutComponentBase
@inject LayoutInfoVm LayoutInfo;
@inject AppSettings ContextConfig;

<CascadingValue Value="LayoutInfo">
    <CascadingValue Value="ContextConfig.ThemeStore">
    <LoadingSpinner />
    <PageLoader IsVisible="@IsPageLoaderVisible" />
    @if(!IsPageLoaderVisible)
    {
    <div class="app-page-layout app-layout">
        <AppNavbar OnMinimized="@ToggleMinimized"/>
        <div class="app-layout__container">
            <AppSidebar />
            <div class="app-layout__main">
                <main class="app-layout__main-layout layout fluid gutter--xl" role="main" >
                @Body
                </main>
            </div>
        </div>
    </div>
    }
    </CascadingValue>
</CascadingValue>

 @code{

    private bool IsPageLoaderVisible { get; set; } = true;

    private int AnimationDuration => 3000;

    public void ToggleMinimized()
    {
        LayoutInfo.ToggleMinimized();
    }

    public void ToggleInverted()
    {
        ContextConfig.ToggleInverted();
        StateHasChanged();
    }

    private async Task HidePageLoader()
    {
        await Task.Delay(AnimationDuration);
        IsPageLoaderVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        ThemeStore.DEFAULT.OnToggle += ToggleInverted;
        ThemeStore.CORPORATE.OnToggle += ToggleInverted;
        await HidePageLoader();
        await base.OnInitializedAsync();
    }
}