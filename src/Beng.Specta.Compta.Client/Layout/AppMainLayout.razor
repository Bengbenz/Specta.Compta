@implements IDisposable
@inherits LayoutComponentBase
@inject SidebarState SidebarState
@inject AppSettings ContextConfig
@inject IJSRuntime JSRuntime

<CascadingValue Value="ContextConfig.SelectedTheme">
    <LoadingSpinner />
    <PageLoader IsVisible="@IsPageLoaderVisible" />
    @if(!IsPageLoaderVisible)
    {
    <div class="app-page-layout app-layout">
        <AppNavbar />
        <div class="app-layout__container">
            <AppSidebar />
            <div class="app-layout__main">
                <main class="app-layout__main-layout layout fluid gutter--md" role="main" >
                    @Body
                </main>
            </div>
        </div>
    </div>
    }
</CascadingValue>

 @code{

    private static readonly int AnimationDuration = 2000;
    private bool IsPageLoaderVisible { get; set; } = true;
    private TenantInfoDTO TenantInfo { get; set; }

    private void ToggleInverted()
    {
        ContextConfig.ToggleInverted();
        StateHasChanged();
    }

    private async Task HidePageLoader()
    {
        await Task.Delay(AnimationDuration);
        IsPageLoaderVisible = false;
    }

    [JSInvokable]
    public void EnableMinimizedState() => SidebarState.UpdateMinimized(true);

    [JSInvokable]
    public void DisableMinimizedState() => SidebarState.UpdateMinimized(false);

    protected override async Task OnInitializedAsync()
    {
        ThemeDictionary.DEFAULT.OnToggle += ToggleInverted;
        ThemeDictionary.CORPORATE.OnToggle += ToggleInverted;

        SidebarState.OnChange += StateHasChanged;

        await HidePageLoader();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.RegisterWindowResizeAsync(
                SidebarState.MobileWidth,
                DotNetObjectReference.Create(this));
        }  
    }

    public void Dispose()
    {
        ThemeDictionary.DEFAULT.OnToggle -= ToggleInverted;
        ThemeDictionary.CORPORATE.OnToggle -= ToggleInverted;

        SidebarState.OnChange -= StateHasChanged;

        JSRuntime.UnregisterWindowResizeAsync(
            SidebarState.MobileWidth,
            DotNetObjectReference.Create(this));
    }
}