@using Syncfusion.Blazor.Popups

@typeparam TSubMenuItem

<li class="@ComputedClass" >
  @if (!IsMinimized)
  {
    <div>
        <div @onclick="OnExpand">
            <AppSidebarLink Icon="@Icon"
                IconRight="@IconRight"
                Title="@Title" />
        </div>
        <transition-expand>
        @if (IsExpanded)
        {
            <ul class="app-sidebar-link-group__submenu" >
            @foreach(var subMenuItem in SubMenuItems)
            {
                @SubMenuItemTemplate(subMenuItem)
            }
            </ul>
        }
        </transition-expand>
    </div>
  }
  else
  { 

    <VaDropdown position="@PositionType.Right" IsFixed="true" IsPreventOverflow="false">
        <Anchor>
            <AppSidebarLink Icon="@Icon"
                IconRight="material-icons"
                IconRightContent="more_horiz"
                IsActive="@IsActive"
                IsMinimized="true"/>
        </Anchor>
        <Content>
            <ul class="app-sidebar-link-group__submenu" style="@ComputedSubMenuColor" >
            @foreach(var subMenuItem in SubMenuItems)
            {
                @SubMenuItemTemplate(subMenuItem)
            }
            </ul>
        </Content>
    </VaDropdown>
  }
</li>

@code{

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public bool IsMinimized { get; set; }
    [Parameter] public RenderFragment<TSubMenuItem> SubMenuItemTemplate { get; set; }
    [Parameter] public Func<Task<IReadOnlyCollection<TSubMenuItem>>> Loader { get; set; }
    [Parameter] public EventCallback OnExpand { get; set; }

    private IReadOnlyCollection<TSubMenuItem> SubMenuItems { get; set; }
    private bool IsHovered { get; set; }

    private string IconRight => IsExpanded ? "fa fa-angle-up" : "fa fa-angle-down";

    private string ComputedClass =>
        CssBuilder.Default("app-sidebar-link-group")
            .AddClass("app-sidebar-link-group--minimized", IsMinimized)
            .AddClass("app-sidebar-link-group--isActive", IsActive)
            .Build();

    private string ComputedLinkStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", "white", !IsHovered && !IsActive)
            .AddStyle("color", ContextTheme[ThemeDictionary.PrimaryKey], IsHovered || IsActive)
            .AddStyle("background-color", ContextTheme[ThemeDictionary.SecondaryKey]
                .ColorShiftHsl(new HslType(h: 0, s: -13, l: 15)).ToString(), IsHovered || IsActive)
            .AddStyle("border-color", ContextTheme[ThemeDictionary.PrimaryKey], (IsHovered || IsActive) && IsActive)
            .AddStyle("border-color", "transparent", (IsHovered || IsActive) && !IsActive)
            .Build();

    private string ComputedSubMenuColor =>
        StyleBuilder.Empty()
            .AddStyle("background-color", "white", ContextTheme.IsInverted)
            .AddStyle("background-color", ContextTheme[ThemeDictionary.SecondaryKey], !ContextTheme.IsInverted)
            .Build();

    private string IconStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", "white", !IsHovered && !IsActive)
            .AddStyle("color", ContextTheme[ThemeDictionary.PrimaryKey], IsHovered || IsActive)
            .Build();

    private void UpdateHoverState(bool isHovered) => IsHovered = isHovered;

    private void EnableHoverState() => UpdateHoverState(true);

    private void DisableHoverState() => UpdateHoverState(false);

    protected override async Task OnParametersSetAsync()
    {
        SubMenuItems = await Loader();
    }
}