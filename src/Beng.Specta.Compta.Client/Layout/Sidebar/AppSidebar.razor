@inject ILogger<AppSidebar> Logger
@inject TenantService TenantService

<aside class="@ComputedClass" style="@ComputedStyle">
  <ul class="app-sidebar__menu">
    @foreach(var item in _menuItems){
      @if(item.Children.Any())
      {
        <AppSidebarGroupLink @key="item"
          Icon="@item.Meta.IconClass"
          Title="@item.DisplayName"
          Children="@item.Children">
          @foreach(var subMenuItem in item.Children)
          {
            <AppSidebarLink @key="subMenuItem"
              Title="@subMenuItem.DisplayName"
              Url="@subMenuItem.Meta.Url" />
          }
        </AppSidebarGroupLink>
      }
      else
      {
        <AppSidebarLink @key="item"
                        Icon="@item.Meta.IconClass"
                        Title="@item.DisplayName"
                        Url="@item.Meta.Url" />
      }
    }
  </ul>
</aside>

@code{

  [CascadingParameter]
  public LayoutInfoVm LayoutInfo { get; set; }

  [CascadingParameter]
  public ThemeStore ContextTheme { get; set; }

  [Parameter]
  public string Color { get; set; } = ThemeStore.SecondaryKey;

  private TenantInfoDTO _tenantInfo => TenantService.TenantInfo;

  private string ComputedStyle
  {
    get
    {
      var style = new StyleType { BackgroundColor = "white" };
      if(ContextTheme == null)
      {
        return style.ToString();
      }

      style.BackgroundColor = !ContextTheme.IsInverted ? ContextTheme.ComputeColor(Color) : "white";
      return style.ToString();
    }
  }

  private string ComputedClass
  {
    get
    {
      var style = "app-sidebar app-layout__sidebar";
      if(LayoutInfo == null)
      {
        return style;
      }

      return LayoutInfo.IsMinimized ? $"{style} app-sidebar--minimized" : style;
    }
  }

  private IList<ModuleInfoVm> _menuItems => new List<ModuleInfoVm>
  {
    new ModuleInfoVm("1", "Dashboard", new MetaInfoVm($"/", "vuestic-iconset vuestic-iconset-dashboard")),
    new ModuleInfoVm("2", "Projets", new MetaInfoVm($"/projects", "vuestic-iconset vuestic-iconset-statistics")),
    new ModuleInfoVm("4", "Budget", new MetaInfoVm($"/budget", "vuestic-iconset vuestic-iconset-forms")),
    new ModuleInfoVm("5", "Finances", new MetaInfoVm($"/funding", "vuestic-iconset vuestic-iconset-tables"))
    {
      Children = new List<ModuleInfoVm>
      {
        new ModuleInfoVm("6", "Plan de Financement", new MetaInfoVm($"/funding-plan")),
        new ModuleInfoVm("7", "Contrats", new MetaInfoVm($"/funding-contracts"))
      }
    },
    new ModuleInfoVm("8", "Comptabilité", new MetaInfoVm($"/accounting", "vuestic-iconset vuestic-iconset-files"))
    {
      Children = new List<ModuleInfoVm>
      {
        new ModuleInfoVm("9", "Intégration", new MetaInfoVm($"/accounting-integration")),
        new ModuleInfoVm("10", "Plan Analytique", new MetaInfoVm($"/accounting-analytic-plan"))
      }
    },
    new ModuleInfoVm("12", "Trésorerie", new MetaInfoVm($"/treasury", "vuestic-iconset vuestic-iconset-ui-elements")),
    new ModuleInfoVm("13", "Administration", new MetaInfoVm($"/settings", "vuestic-iconset vuestic-iconset-settings"))
    {
      Children = new List<ModuleInfoVm>
      {
        new ModuleInfoVm("14", "Utilisateurs", new MetaInfoVm($"/settings-users")),
        new ModuleInfoVm("15", "Rôles", new MetaInfoVm($"/settings-roles")),
        new ModuleInfoVm("16", "Permissions", new MetaInfoVm($"/settings-permissions"))
      }
    }
  };

  protected override async Task OnInitializedAsync()
  {
      await base.OnInitializedAsync();
  }
}