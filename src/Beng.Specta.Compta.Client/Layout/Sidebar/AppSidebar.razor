@inject ILogger<AppSidebar> Logger

<aside class="@ComputedClass" style="@ComputedStyle">
  <ul class="app-sidebar__menu">
    @foreach(var item in _menuItems){
      @if(item.Children.Any())
      {
        <AppSidebarGroupLink @key="item"
          Icon="@item.Meta.IconClass"
          Title="@item.DisplayName"
          Children="@item.Children">
          @foreach(var subMenuItem in item.Children)
          {
            <AppSidebarLink @key="subMenuItem"
              Title="@subMenuItem.DisplayName"
              Url="@subMenuItem.Meta.Url" />
          }
        </AppSidebarGroupLink>
      }
      else
      {
        <AppSidebarLink @key="item"
                        Icon="@item.Meta.IconClass"
                        Title="@item.DisplayName"
                        Url="@item.Meta.Url" />
      }
    }
  </ul>
</aside>

@code{

  [CascadingParameter]
  public LayoutInfoVm LayoutInfo { get; set; }

  [CascadingParameter]
  public ThemeStore ContextTheme { get; set; }

  [Parameter]
  public string Color { get; set; } = ThemeStore.SecondaryKey;

  private string ComputedClass => ComputeClass();
  private string ComputedStyle => ComputeColorStyle();

  private string ComputeColorStyle()
  {
    var style = new StyleType { BackgroundColor = "white" };
    if(ContextTheme == null)
    {
      return style.ToString();
    }

    style.BackgroundColor = !ContextTheme.IsInverted ? ContextTheme.ComputeColor(Color) : "white";
    return style.ToString();
  }

  private string ComputeClass()
  {
    var style = "app-sidebar app-layout__sidebar";
    if(LayoutInfo == null)
    {
      return style;
    }

    return LayoutInfo.IsMinimized ? $"{style} app-sidebar--minimized" : style;
  }

  private IList<ModuleInfoVm> _menuItems => new List<ModuleInfoVm>
  {
    new ModuleInfoVm("1", "Dashboard", new MetaInfoVm("/", "vuestic-iconset vuestic-iconset-dashboard")),
    new ModuleInfoVm("2", "Exercices comptables", new MetaInfoVm("/stats", "vuestic-iconset vuestic-iconset-statistics"))
    {
      Children = new List<ModuleInfoVm>
      {
        new ModuleInfoVm("3", "Projets", new MetaInfoVm("/charts")),
        new ModuleInfoVm("4", "Statistics", new MetaInfoVm("/progressbar")),
      }
    },
    new ModuleInfoVm("4", "Budget", new MetaInfoVm("/forms", "vuestic-iconset vuestic-iconset-forms")),
    new ModuleInfoVm("5", "Financement", new MetaInfoVm("/tables", "vuestic-iconset vuestic-iconset-tables"))
    {
      Children = new List<ModuleInfoVm>
      {
        new ModuleInfoVm("6", "Projets", new MetaInfoVm("/markuptable")),
        new ModuleInfoVm("7", "Facturation", new MetaInfoVm("/datatable")),
      }
    },
    new ModuleInfoVm("8", "Tr√©sorerie", new MetaInfoVm("/uielements", "vuestic-iconset vuestic-iconset-ui-elements")),
    new ModuleInfoVm("9", "Bilan", new MetaInfoVm("/maps", "vuestic-iconset vuestic-iconset-maps")),
    new ModuleInfoVm("10", "Utilisateurs", new MetaInfoVm("/pages", "vuestic-iconset vuestic-iconset-files")),
  };

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
  }

  protected override async Task OnInitializedAsync()
  {
      await base.OnInitializedAsync();
      Logger.LogDebug($"{GetType().Name} initialized");
  }
}