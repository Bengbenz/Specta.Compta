@inject LayoutState LayoutState

<aside class="@ComputedClass" style="@ComputedStyle">
    <ul class="app-sidebar__menu">
      @foreach (var item in LayoutState.MenuItems)
      {
        @if (item.Children.Any())
        {
            <AppSidebarGroupLink @key="item"
                Icon="@item.Meta.IconClass"
                Title="@item.DisplayName"
                Tooltip="@item.DisplayName"
                IsExpanded="@item.IsExpanded"
                IsMinimized="@LayoutState.IsMinimized"
                IsActive="@item.IsActive"
                Loader="@(() => Task.Run(() => item.Children))"
                OnExpand="@(() => ToggleExpandMenu(item))" >
                <SubMenuItemTemplate Context="subMenuItem">
                    <AppSidebarLink @key="subMenuItem"
                        Title="@subMenuItem.DisplayName"
                        Url="@subMenuItem.Meta.Url.OriginalString"
                        IsActive="@subMenuItem.IsActive"
                        @onclick="@(() => UpdateActiveState(subMenuItem, item))"/>
                </SubMenuItemTemplate>
            </AppSidebarGroupLink>
        }
        else
        {
            <AppSidebarItemLink TItem="@item" Tooltip="@item.DisplayName" IsMinimized="@LayoutState.IsMinimized">
                <MenuItemTemplate Context="menuItem">
                    <AppSidebarLink @key="item" Icon="@item.Meta.IconClass"
                        Title="@menuItem.DisplayName"
                        Url="@menuItem.Meta.Url.OriginalString"
                        IsActive="@menuItem.IsActive"
                        IsMinimized="@LayoutState.IsMinimized"
                        @onclick="@(() => UpdateActiveState(menuItem))" />
                </MenuItemTemplate>
            </AppSidebarItemLink>
        }
      }
    </ul>
</aside>

@code{

    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; } = null!;
    [Parameter] public string Color { get; set; } = ThemeDictionary.SecondaryKey;
    
    private string ComputedStyle =>
        StyleBuilder.Default("background-color", "white")
            .AddStyle("background-color", ContextTheme.ComputeColor(Color), !ContextTheme.IsInverted)
            .Build();

    private string ComputedClass =>
        CssBuilder.Default("app-sidebar app-layout__sidebar")
            .AddClass("app-sidebar--minimized", LayoutState.IsMinimized)
            .Build();

    private void UpdateActiveState(ModuleInfoVm? menuItem = null, ModuleInfoVm? groupItem = null) =>
        LayoutState.SetActiveItem(menuItem, groupItem);

    private void ToggleExpandMenu(ModuleInfoVm groupItem ) =>
        LayoutState.ToggleExpandedGroup(groupItem);

    protected override async Task OnInitializedAsync()
    {
        UpdateActiveState();
        await base.OnInitializedAsync();
    }
}