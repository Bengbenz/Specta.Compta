<li class="@ComputedClass" @attributes="AdditionalAttributes">
    <NavLink class="app-sidebar-link__item" style="@ComputedLinkStyle" href="@Url" target="@Target"
             @onmouseover="EnableHoverState" @onmouseout="DisableHoverState" >

        <VaIcon IsVisible="@(!string.IsNullOrWhiteSpace(Icon))"
                Name="@Icon"
                class="app-sidebar-link__item-icon"
                style="@IconStyle" />

        @if(!string.IsNullOrWhiteSpace(Title))
        {
          <div class="app-sidebar-link__item-title">
              @Title
          </div>
        }

        <VaIcon IsVisible="@(!string.IsNullOrWhiteSpace(IconRight))"
                Name="@IconRight"
                class="app-sidebar-link__item-icon-right"
                style="@IconStyle" >
            @IconRightContent
        </VaIcon>
    </NavLink>
</li>

@code{

    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object> AdditionalAttributes { get; set; }
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Url { get; set; }
    [Parameter] public string Target { get; set; } = "_self";
    [Parameter] public string Icon { get; set; }
    [Parameter] public string IconRight { get; set; }
    [Parameter] public string IconRightContent { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public bool IsMinimized { get; set; }

    private bool IsHovered { get; set; }

    private string ComputedClass =>
        CssBuilder.Default("app-sidebar-link")
            .AddClass("app-sidebar-link--minimized", IsMinimized)
            .Build();

    private string IconStyle =>
        StyleBuilder.Default("color", "white")
            .AddStyle("color", ContextTheme[ThemeDictionary.GrayKey], ContextTheme.IsInverted && (!IsHovered && !IsActive))
            .AddStyle("color", ContextTheme[ThemeDictionary.PrimaryKey], !ContextTheme.IsInverted  && (IsHovered || IsActive))
            .Build();

    private string ComputedLinkStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", "white", ContextTheme.IsInverted && (IsHovered || IsActive))
            .AddStyle("color", ContextTheme[ThemeDictionary.GrayKey], ContextTheme.IsInverted && (!IsHovered && !IsActive))
            .AddStyle("color", ContextTheme[ThemeDictionary.PrimaryKey], !ContextTheme.IsInverted)
            .AddStyle("background-color", ContextTheme[ThemeDictionary.SecondaryKey]
                .ColorShiftHsl(new HslType { Hue = 0, Saturation = -13, Lightness = 15 }).ToString(), (IsHovered || IsActive) && ContextTheme.IsGradient)
            .AddStyle("background-color", ContextTheme[ThemeDictionary.PrimaryKey], (IsHovered || IsActive) && !ContextTheme.IsGradient)
            .AddStyle("border-color", ContextTheme[ThemeDictionary.PrimaryKey], (IsHovered || IsActive) && ContextTheme.IsGradient && IsActive)
            .AddStyle("border-color", "transparent", (IsHovered || IsActive) && ContextTheme.IsGradient && !IsActive)
            .AddStyle("border-color", ContextTheme[ThemeDictionary.PrimaryKey]
                .ColorShiftHsl(new HslType { Hue = 0, Saturation = 13, Lightness = -15 }).ToString(), (IsHovered || IsActive) && !ContextTheme.IsGradient)
            .Build();

    private void UpdateHoverState(bool isHovered) => IsHovered = isHovered;

    private void EnableHoverState() => UpdateHoverState(true);

    private void DisableHoverState() => UpdateHoverState(false);
}
