@inherits LayoutComponentBase
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject LayoutState LayoutState
@inject ThemeState ThemeState

<CascadingValue Value="ThemeState.SelectedTheme">
    <PageLoader>
        <AuthorizeView>
            <Authorizing>
                <AutoLoadingSpinner />
            </Authorizing>
            <NotAuthorized>
                <RedirectToLogin />
            </NotAuthorized>
            <Authorized>
                <AutoLoadingSpinner>
                    <div class="app-page-layout app-layout">
                        <AppNavbar />
                        <div class="app-layout__container">
                            <AppSidebar />
                            <div class="app-layout__main">
                                <main class="app-layout__main-layout layout fluid gutter--md" role="main" >
                                    @Body
                                </main>
                            </div>
                        </div>
                    </div>
                </AutoLoadingSpinner>
            </Authorized>
        </AuthorizeView>
    </PageLoader>
</CascadingValue>

@code{

    [CascadingParameter] private ThemeDictionary ContextTheme { get; set; }

    private void ToggleInverted() => ThemeState.ToggleInverted();

    [JSInvokable]
    public void EnableMinimizedState() => LayoutState.UpdateMinimized(true);

    [JSInvokable]
    public void DisableMinimizedState() => LayoutState.UpdateMinimized(false);

    protected override async Task OnInitializedAsync()
    {
        LayoutState.OnChange += StateHasChanged;

        ThemeState.OnChange += StateHasChanged;
        ThemeDictionary.OnToggle = ToggleInverted;
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.RegisterWindowResizeAsync(
            LayoutState.MobileWidth,
            DotNetObjectReference.Create(this));
    }

    public void Dispose()
    {
        LayoutState.OnChange -= StateHasChanged;
        ThemeState.OnChange -= StateHasChanged;

        JSRuntime.UnregisterWindowResizeAsync(
            LayoutState.MobileWidth,
            DotNetObjectReference.Create(this));
    }
}