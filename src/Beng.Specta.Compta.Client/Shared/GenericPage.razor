@typeparam TItem

<VaCard ExtraClass="mb-2"
        Title="@Title"
        Image="@ImageForEmpty"
        IsOverlay="true"
        IsTitleOnImage="@(!string.IsNullOrWhiteSpace(ImageForEmpty))">
    <Header>
        @if (Items?.Count == 0)
        {
            <VaButton Icon="ion ion-ios-add-circle-outline" @onclick="@AddAction" IsLarge="true">
                @NewText
            </VaButton>
        }
        else
        {
            <VaIcon Name="@Icon" Color="@ThemeStore.InfoKey" />
            <h5 class="ml-2 mt-0 mb-0" style="color:@(ContextTheme[ThemeStore.InfoKey])">@Title</h5>
        }
    </Header>
    <Actions>
        <VaButton IsVisible="@(Items != null && Items.Count > 0)" Icon="fa fa-refresh" @onclick="@Loader" />
    </Actions>
    <BodyContent>
        <VaNotification BadgeText="Error" Color="@ThemeStore.DangerKey" IsVisible="@(ErrorDetails != null)" ExtraClass="mb-4">
            @ErrorDetails
        </VaNotification>
        @if (Items == null)
        {
            @Loading
        }
        else if (Items.Count > 0)
        {
            foreach(var item in Items)
            {
                @Item(item)
            }
        }
        else
        {
            <div class="flex-center py-2">
                @Empty
            </div>
        }
   </BodyContent>
</VaCard>

@code
{
    [CascadingParameter]
    public ThemeStore ContextTheme { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public Func<Task<IList<TItem>>> Loader { get; set; }

    [Parameter]
    public EventCallback AddAction { get; set; }

    [Parameter]
    public string NewText { get; set; }

    [Parameter] 
    public string ErrorDetails  { get; set; }

    [Parameter]
    public RenderFragment Loading { get; set; }

    [Parameter]
    public RenderFragment Empty { get; set; }

    [Parameter]
    public RenderFragment<TItem> Item { get; set; }

    private IList<TItem> Items;

    private string[] BackgroundImages { get; } =
    {
        "pexels-photo.jpg",
        "pexels-photo-39811.jpeg",
        "pexels-photo-235615.jpeg",
        "pexels-photo-247431.jpeg",
        "pexels-photo-247478.jpeg",
        "pexels-photo-257840.jpeg",
        "pexels-photo-459059.jpeg",
        "fall-autumn-red-season.jpg",
        "woodland-road-falling-leaf-natural-38537.jpeg"
    };

    private string ImageForEmpty
    {
        get
        {
            var imageSrc = string.Empty;
            if (Items.Count == 0)
            {
                imageSrc = $"imgs/{BackgroundImages[new Random().Next(BackgroundImages.Length)]}";
            }
            return imageSrc;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Items = await Loader();
    }
}