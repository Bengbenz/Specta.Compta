@using Beng.Specta.Compta.Core.DTOs.Auth
@inject AppAuthenticationStateProvider AuthService
@inject HttpWebApiClient WebApiClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime 
@inject ILogger<LoginForm> Logger

<EditForm EditContext="@_editContext" OnSubmit="LoginUser">
    <DataAnnotationsValidator />
    <ServerSideValidator @ref="ServerSideValidator" />
    <VaInput @bind-Value="_userInfo.Email"
      Type="@VaInputType.Email"
      Label="Email" />

    <VaInput @bind-Value="_userInfo.Password"
      Type="@VaInputType.Password"
      Label="Mot de passe" />

    <div class="auth-layout__options d-flex align--center justify--space-between">
        <VaCheckBox @bind-Value="_userInfo.RememberMe" class="mb-0" Label="Se souvenir de moi ?"/>
        <NavLink class="ml-1 link" style="@LinkStyle" href="/forgot-password">Mot de passe oubli√© ?</NavLink>
    </div>

    <div class="d-flex justify--center mt-3">
        <VaButton Type="@ButtonType.Submit" class="my-0">Se connecter</VaButton>
    </div>
</EditForm>

@code
{
    [CascadingParameter] public ThemeDictionary ContextTheme { get; set; }

    private SignInUserInfoDto _userInfo { get; set; } = new SignInUserInfoDto();
    private ServerSideValidator ServerSideValidator { get; set; }
    private EditContext _editContext;

    private string LinkStyle =>
        StyleBuilder.Empty()
            .AddStyle("color", ContextTheme[ThemeDictionary.PrimaryKey], ContextTheme.IsInverted)
            .Build();

    private async Task LoginUser()
    {
        var isValid = _editContext.Validate() && await ServerValidate();
        if (isValid)
        {
            await WebApiClient.CreateRequest("api/account/signin")
                .OnBadRequest<Dictionary<string, List<string>>>(errors =>
                {
                    Logger.LogDebug($"{GetType().Name}: Login is failed.");
                    ServerSideValidator.DisplayErrors(errors, true);
                })
                .OnOK(() =>
                {
                    AuthService.Login();
                    Logger.LogDebug($"{GetType().Name}: User Logged");
                    NavigationManager.NavigateTo("/");
                    JsRuntime.LaunchToast("success", $"Welcome {_userInfo.Email}");
                    _userInfo = new SignInUserInfoDto();
                })
                .PostAsync(_userInfo);
        }
        else
        {
            Logger.LogWarning($"{GetType().Name}: Form not valid");
        }
    }

    private async Task<bool> ServerValidate()
    {
        var result = false;
        await WebApiClient.CreateRequest("api/account/details")
            .OnNotFound(() =>
            {
                ServerSideValidator.DisplayError(nameof(_userInfo.Email), "Invalid credentials");
                result = false;
            })
            .OnOK(() => result = true)
            .GetAsync(_userInfo.Email);

        return result;
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_userInfo);
    }
}